{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.componets.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","handleSearchInputChange","e","setState","searchField","target","value","state","fetch","then","response","json","data","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCJjBC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACP,GACjB,OAAO,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCL7BO,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC0CjEG,E,kDAvCX,aAAe,IAAD,8BACV,gBAiBJC,wBAA0B,SAACC,GACvB,EAAKC,SAAS,CACVC,YAAaF,EAAEG,OAAOC,SAlB1B,EAAKC,MAAQ,CACTd,SAAU,GACVW,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBI,MAAM,8CAA8CC,MAAK,SAACC,GAC9C,OAARA,QAAQ,IAARA,KAAUC,OAAOF,MAAK,SAACG,GACnB,EAAKT,SAAS,CAAEV,SAAUmB,Y,oBAatC,WACI,MAAkCC,KAAKN,MAA/Bd,EAAR,EAAQA,SAAUW,EAAlB,EAAkBA,YACZU,EAAmBrB,EAASsB,QAAO,SAAC5B,GAAD,OACrCA,EAAQG,KAAK0B,cAAcC,SAASb,EAAYY,kBAEpD,OACI,sBAAK/B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKZ,0BAC5D,cAAC,EAAD,CAAUR,SAAUqB,W,GAlClBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.bc67c315.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    );\r\n};\r\n","import \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.monsters.map((monster) => {\r\n                return <Card key={monster.id} monster={monster} />;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n);\r\n","import { Component } from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.componets\";\r\nimport \"./App.css\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            monsters: [],\r\n            searchField: \"\",\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) => {\r\n            response?.json().then((data) => {\r\n                this.setState({ monsters: data });\r\n            });\r\n        });\r\n    }\r\n\r\n    // we use the arrow function to automatically assign the scope of this keyword in the function\r\n    // otherwise, we need to use \"this.handlexxx = this.hanlexxx.bind(this)\" in the constructor to make sure this keyword is correctly refereced in this function\r\n    handleSearchInputChange = (e) => {\r\n        this.setState({\r\n            searchField: e.target.value,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { monsters, searchField } = this.state;\r\n        const filteredMonsters = monsters.filter((monster) =>\r\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Monsters Rolodex</h1>\r\n                <SearchBox placeholder=\"search monsters\" handleChange={this.handleSearchInputChange} />\r\n                <CardList monsters={filteredMonsters}></CardList>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}